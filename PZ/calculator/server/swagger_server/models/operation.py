# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Operation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, num1: int=None, num2: int=None):  # noqa: E501
        """Operation - a model defined in Swagger

        :param num1: The num1 of this Operation.  # noqa: E501
        :type num1: int
        :param num2: The num2 of this Operation.  # noqa: E501
        :type num2: int
        """
        self.swagger_types = {
            'num1': int,
            'num2': int
        }

        self.attribute_map = {
            'num1': 'num1',
            'num2': 'num2'
        }
        self._num1 = num1
        self._num2 = num2

    @classmethod
    def from_dict(cls, dikt) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The operation of this Operation.  # noqa: E501
        :rtype: Operation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num1(self) -> int:
        """Gets the num1 of this Operation.


        :return: The num1 of this Operation.
        :rtype: int
        """
        return self._num1

    @num1.setter
    def num1(self, num1: int):
        """Sets the num1 of this Operation.


        :param num1: The num1 of this Operation.
        :type num1: int
        """
        if num1 is None:
            raise ValueError("Invalid value for `num1`, must not be `None`")  # noqa: E501

        self._num1 = num1

    @property
    def num2(self) -> int:
        """Gets the num2 of this Operation.


        :return: The num2 of this Operation.
        :rtype: int
        """
        return self._num2

    @num2.setter
    def num2(self, num2: int):
        """Sets the num2 of this Operation.


        :param num2: The num2 of this Operation.
        :type num2: int
        """
        if num2 is None:
            raise ValueError("Invalid value for `num2`, must not be `None`")  # noqa: E501

        self._num2 = num2
